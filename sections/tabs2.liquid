{%- if section.blocks.size > 0 -%}
<div class="section-spacing {% if section.settings.separate_section_with_border %}bordered-section{% endif %}">
  <div class="container {% if section.settings.text_alignment == 'center' %}container--xl{% endif %}">
    <div class="section-stack">
      {%- render 'section-header', subheading: section.settings.subheading, heading: section.settings.title, content: section.settings.content, text_alignment: section.settings.text_alignment -%}
<div class="maincontainer">
      <x-tabs class="content-tabs {% if section.settings.text_alignment == 'center' %}content-tabs--center{% endif %} sm:block">
        <template shadowrootmode="open">
          <slot role="tablist" part="tab-list" name="title"></slot>
          <slot part="tab-panel-list" name="content"></slot>
        </template>

        {%- for block in section.blocks -%}
          {%- assign title = block.settings.title | default: block.settings.collection.title -%}

          {%- if title != blank and block.settings.collection != blank -%}
            <button class="h6" type="button" role="tab" slot="title" {{ block.shopify_attributes }}>{{ title }}</button>

            <div role="tabpanel" slot="content" {% cycle '', 'hidden', 'hidden', 'hidden', 'hidden' %}>
              <div>
                
                  <product-list id="product-list-{{ section.id }}-{{ forloop.index }}" class="product-list">
                    {%- for product in block.settings.collection.products -%}
                      
                        {%- render 'color-variant', product: product, reveal: settings.stagger_products_apparition, hide_product_information: section.settings.hide_product_information, stacked: true -%}
                      
                    {%- else -%}
                      {%- for i in (1..block.settings.products_count) -%}
                        <div class="product-item">
                          {%- render 'product-card-placeholder', loop_index: forloop.index0, hide_product_information: section.settings.hide_product_information -%}
                        </div>
                      {%- endfor -%}
                    {%- endfor -%}
                  </product-list>
            
                  
                
              </div>
            </div>

            <div slot="accordion-tab">
              {%- render 'accordion', title: title, content: content, open: block.settings.open_on_mobile -%}
            </div>
          {%- endif -%}
        {%- endfor -%}
      </x-tabs>


<div class="sidecart">
  
    <div class="h6">Your selection</div>
    <div class="sidecart-text">Lorem ipsum dolor, sit amet consectetur adipisicing elit. Repudiandae maiores provident non, molestiae quibusdam ex consequuntur ab? Quidem, natus, veritatis eius quam inventore commodi, incidunt maiores placeat vero alias minima.</div>
  
</div>

<form action="/cart/add" method="post" id="sidecart-form" style="display: none;">
  <input type="hidden" name="items" id="sidecart-items" value="[]">
</form>

      </div>

      
    
      <!-- MOBILE LAYOUT -->
      {%- comment -%}Mobile layout remains unchanged{%- endcomment -%}
    </div>
  </div>
</div>
{%- endif -%}

<style> 

.add-to-sidecart {

background: rgb(var(--background-secondary));
    color: rgb(var(--text-color));
    z-index: 1;
    padding: 1rem; 
    font-size: 5.25rem; 
    position: absolute;
    inset-block-start: .5rem;
    inset-inline-end: .5rem;
    transform: translate(50%, 50%);
}

@media screen and (pointer: fine) {
    .add-to-sidecart {
    opacity: 0;
    transition: opacity .2s ease-in-out, transform .2s ease-in-out;
    transform: translateY(5px);
  }

  .add-to-sidecart :is(svg) {
    transition: transform .2s ease-in-out;
  }

  .add-to-sidecart:hover svg {
    transform: rotateZ(90deg);
  }

  .product-card:hover .add-to-sidecart {
    opacity: 1;
    transform: translateY(0);
  }
}

.sidecart-text {
  padding: 1.5rem;
}

.price-list {
  display: none;
  
}

.product-card{
gap: 0.5rem;
padding-bottom: 1rem ;
}

.product-title {
  display: none;
}

.maincontainer {
  display: grid;
  grid-template-columns: 2fr 1fr; 
  gap: 20px; 
  padding: 20px; 
  overflow: visible;
  height: 100%;
  align-items: start; /* Ensure sticky behavior works */
}


.sidecart {
    align-self: start;
    position: sticky;
    top: 7.9rem;
  
} 


.sidecart .h6 {
  text-align: center;
  padding-bottom: 10px; 
  border-bottom: 1px solid rgb(95, 95, 95);
}

.product-list {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  grid-template-rows: repeat(4, 1fr);
  gap: 10px;
  padding: 10px;
}

@media (max-width: 768px) {
  .product-list {
    grid-template-columns: repeat(2, 1fr);
    grid-template-rows: auto;
  }
}

.content-tabs--center::part(tab-panel-list)
{
  width: unset;
}




@media screen and (max-width: 768px) {
  .maincontainer {
    grid-template-columns: 1fr; /
    gap: 10px; 
  }
}

.sidecart-list {
    list-style-type: none;
    padding: 0;
    margin: 0;
  }

  .sidecart-list li {
    padding: 10px 0;
    border-bottom: 1px solid rgba(var(--text-color-rgb), 0.1);
  }

  .sidecart-list li:last-child {
    border-bottom: none;
  }

  .sidecart-list span {
    display: block;
  }

</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const addToSidecartButtons = document.querySelectorAll('.add-to-sidecart');
  const sidecart = document.querySelector('.sidecart');
  const sidecartForm = document.getElementById('sidecart-form');
  const sidecartItems = document.getElementById('sidecart-items');
  let selectedProducts = {};

  function updateSidecart() {
    // ... (keep the existing updateSidecart function) ...

    // Update the hidden form input with the selected products
    const formItems = Object.values(selectedProducts).map(product => ({
      id: product.variantId,
      quantity: product.quantity
    }));
    sidecartItems.value = JSON.stringify(formItems);
  }

  function addToSidecart(event) {
    // ... (keep the existing addToSidecart function) ...
  }

  function removeFromSidecart(event) {
    // ... (keep the existing removeFromSidecart function) ...
  }

  function addToCart() {
    if (Object.keys(selectedProducts).length === 0) {
      alert('No items selected');
      return;
    }

    sidecartForm.submit();
  }

  addToSidecartButtons.forEach(button => {
    button.addEventListener('click', addToSidecart);
  });

  // Add a button to submit the form and add items to cart
  const addToCartButton = document.createElement('button');
  addToCartButton.textContent = 'Add to Cart';
  addToCartButton.classList.add('add-to-cart-button');
  addToCartButton.addEventListener('click', addToCart);
  sidecart.appendChild(addToCartButton);

  // Initialize sidecart
  updateSidecart();
});
</script>


{% schema %}
{
  "name": "Collection Tabs",
  "class": "shopify-section--collection-tabs",
  "max_blocks": 5,
  "disabled_on": {
    "groups": ["header", "custom.overlay"]
  },
  "settings": [
    {
      "type": "checkbox",
      "id": "separate_section_with_border",
      "label": "t:global.section.separate_section_with_border",
      "default": true
    },
    {
      "type": "inline_richtext",
      "id": "subheading",
      "label": "t:global.text.subheading",
      "default": "Subheading"
    },
    {
      "type": "inline_richtext",
      "id": "title",
      "label": "t:global.text.heading",
      "default": "Collection Tabs"
    },
    {
      "type": "select",
      "id": "text_alignment",
      "label": "t:global.text.alignment",
      "options": [
        {
          "value": "start",
          "label": "t:global.position.left"
        },
        {
          "value": "center",
          "label": "t:global.position.center"
        }
      ],
      "default": "center"
    },
    {
      "type": "checkbox",
      "id": "hide_product_information",
      "label": "Hide product information",
      "default": false
    },
    {
      "type": "select",
      "id": "products_per_row_mobile",
      "label": "Products per row (mobile)",
      "options": [
        {
          "value": "1",
          "label": "1"
        },
        {
          "value": "2",
          "label": "2"
        }
      ],
      "default": "2"
    },
    {
      "type": "select",
      "id": "products_size_desktop",
      "label": "Product size (desktop)",
      "options": [
        {
          "value": "compact",
          "label": "Compact"
        },
        {
          "value": "medium",
          "label": "Medium"
        },
        {
          "value": "large",
          "label": "Large"
        }
      ],
      "default": "medium"
    },
    {
      "type": "range",
      "min": 0.2,
      "max": 2,
      "step": 0.1,
      "id": "horizontal_spacing_factor",
      "label": "Horizontal spacing factor",
      "default": 1
    },
    {
      "type": "range",
      "min": 0.2,
      "max": 2,
      "step": 0.1,
      "id": "vertical_spacing_factor",
      "label": "Vertical spacing factor",
      "default": 1
    }
  ],
  "blocks": [
    {
      "type": "collection_tab",
      "name": "Collection Tab",
      "settings": [
        {
          "type": "text",
          "id": "title",
          "label": "Tab title",
          "default": "Collection"
        },
        {
          "type": "collection",
          "id": "collection",
          "label": "Collection"
        },
        {
          "type": "range",
          "id": "products_count",
          "min": 4,
          "max": 48,
          "step": 4,
          "default": 16,
          "label": "Products to show per page"
        },
        {
          "type": "checkbox",
          "id": "open_on_mobile",
          "label": "Open on mobile",
          "default": false
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Collection Tabs",
      "blocks": [
        {
          "type": "collection_tab"
        },
        {
          "type": "collection_tab"
        },
        {
          "type": "collection_tab"
        }
      ]
    }
  ]
}
{% endschema %}