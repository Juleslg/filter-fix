{%- if section.blocks.size > 0 -%}
<div class="section-spacing {% if section.settings.separate_section_with_border %}bordered-section{% endif %}">
  <div class="container {% if section.settings.text_alignment == 'center' %}container--xl{% endif %}">
    <div class="section-stack">
      {%- render 'section-header', subheading: section.settings.subheading, heading: section.settings.title, content: section.settings.content, text_alignment: section.settings.text_alignment -%}
<div class="maincontainer">
      <x-tabs class="content-tabs {% if section.settings.text_alignment == 'center' %}content-tabs--center{% endif %} sm:block">
        <template shadowrootmode="open">
          <slot role="tablist" part="tab-list" name="title"></slot>
          <slot part="tab-panel-list" name="content"></slot>
        </template>

        {%- for block in section.blocks -%}
          {%- assign title = block.settings.title | default: block.settings.collection.title -%}

          {%- if title != blank and block.settings.collection != blank -%}
            <button class="h6" type="button" role="tab" slot="title" {{ block.shopify_attributes }}>{{ title }}</button>

            <div role="tabpanel" slot="content" {% cycle '', 'hidden', 'hidden', 'hidden', 'hidden' %}>
              <div>
                
                  <product-list id="product-list-{{ section.id }}-{{ forloop.index }}" class="product-list">
                    {%- for product in block.settings.collection.products -%}
                      
                        {%- render 'color-variant', product: product, reveal: settings.stagger_products_apparition, hide_product_information: section.settings.hide_product_information, stacked: true -%}
                      
                    {%- else -%}
                      {%- for i in (1..block.settings.products_count) -%}
                        <div class="product-item">
                          {%- render 'product-card-placeholder', loop_index: forloop.index0, hide_product_information: section.settings.hide_product_information -%}
                        </div>
                      {%- endfor -%}
                    {%- endfor -%}
                  </product-list>
            
                  
                
              </div>
            </div>

            <div slot="accordion-tab">
              {%- render 'accordion', title: title, content: content, open: block.settings.open_on_mobile -%}
            </div>
          {%- endif -%}
        {%- endfor -%}
      </x-tabs>


    <div class="sidecart">
        <div class="h6">Your selection</div>
            <div class="sidecart-items-container">
                <div id="sidecart-items"></div>
            </div>
            <form method="post" action="/cart/add" id="sidecart-form">
                <!-- Hidden inputs will be dynamically added here -->
            <button type="submit" class="button button--primary" id="add-to-cart-button">Add to Cart</button>
            </form>
    </div>


      </div>

      
    
      <!-- MOBILE LAYOUT -->
      {%- comment -%}Mobile layout remains unchanged{%- endcomment -%}
    </div>
  </div>
</div>
{%- endif -%}

<style> 

.sidecart-item-variant {
    text-transform: uppercase;
    letter-spacing: var(--heading-letter-spacing);
    font-size: .625rem;
}

.sidecart-list {
    padding-top: 1.8rem;

}

.add-to-sidecart {

  background: rgb(var(--background-secondary));
  color: rgb(var(--text-color));
  z-index: 1;
  padding: .625rem;
  font-size: 1.25rem;
  position: absolute;
  inset-block-start: .5rem;
  inset-inline-end: .5rem;
}

@media screen and (pointer: fine) {
    .add-to-sidecart {
    opacity: 0;
    transition: opacity .2s ease-in-out, transform .2s ease-in-out;
    transform: translateY(5px);
  }

  .add-to-sidecart :is(svg) {
    transition: transform .2s ease-in-out;
  }

  .add-to-sidecart:hover svg {
    transform: rotateZ(90deg);
  }

  .product-card:hover .add-to-sidecart {
    opacity: 1;
    transform: translateY(0);
  }
}

.sidecart-text {
  padding: 1.5rem;
}

.price-list {
  display: none;
  
}

.product-card{
gap: 0.5rem;
padding-bottom: 1rem ;
}

.product-title {
  display: none;
}

.maincontainer {
  display: grid;
  grid-template-columns: 2fr 1fr; 
  gap: 20px; 
  padding: 20px; 
  overflow: visible;
  height: 100%;
  align-items: start; /* Ensure sticky behavior works */
}


.sidecart {
    align-self: start;
    position: sticky;
    top: 7.9rem; /* Adjust this value based on your header height */
    display: flex;
    flex-direction: column;
    max-height: calc(100vh - 8.9rem); /* Adjust based on your layout */
  }

  .sidecart .h6 {
    text-align: center;
    padding-bottom: 10px; 
    border-bottom: 1px solid rgb(95, 95, 95);
  }

  .sidecart-items-container {
    flex-grow: 1;
    overflow-y: auto;
    margin-bottom: 1rem;
  }

  .sidecart-items-container::-webkit-scrollbar {
    width: 6px;
  }

  .sidecart-items-container::-webkit-scrollbar-thumb {
    background-color: rgba(var(--text-color-rgb), 0.3);
    border-radius: 3px;
  }

  .sidecart-items-container::-webkit-scrollbar-track {
    background-color: rgba(var(--text-color-rgb), 0.1);
  }

  #sidecart-form {
    margin-top: auto;
  }

.product-list {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  grid-template-rows: repeat(4, 1fr);
  gap: 10px;
  padding: 10px;
}

@media (max-width: 768px) {
  .product-list {
    grid-template-columns: repeat(2, 1fr);
    grid-template-rows: auto;
  }
}

.content-tabs--center::part(tab-panel-list)
{
  width: unset;
}




@media screen and (max-width: 768px) {
  .maincontainer {
    grid-template-columns: 1fr; /
    gap: 10px; 
  }
}

.sidecart-list {
    list-style-type: none;
    margin: 0;
  }

  .sidecart-item {
  display: flex;
  align-items: center;
  justify-content: space-evenly;
  padding: 10px 0;
  border-bottom: 1px solid rgba(var(--text-color-rgb), 0.1);
}

.sidecart-item-info {
  flex-grow: 1;
}

.sidecart-item-title {
  font-weight: bold;
}

.sidecart-item-variant {
  font-size: 0.9em;
  color: rgba(var(--text-color-rgb), 0.8);
}

.sidecart-item-quantity {
  display: flex;
  align-items: center;
  margin-left: 10px;
  margin-right: 10px;
}

.quantity-button {
  background: none;
  border: 1px solid rgba(var(--text-color-rgb), 0.3);
  color: rgb(var(--text-color));
  cursor: pointer;
  font-size: 1em;
  padding: 0 5px;
  height: 24px;
  width: 24px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.quantity-input {
  width: 30px;
  text-align: center;
  border: none;
  font-size: 0.9em;
  margin: 0 5px;
}

.sidecart-item-remove {
  background: none;
  border: none;
  color: rgb(var(--accent-color));
  cursor: pointer;
  font-size: 3.2em;
  padding: 5px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.sidecart-item-remove:hover {
  color: rgb(var(--accent-color-darker));
}

</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const addToSidecartButtons = document.querySelectorAll('.add-to-sidecart');
  const sidecartItems = document.getElementById('sidecart-items');
  const sidecartForm = document.getElementById('sidecart-form');
  let selectedProducts = {};

  function updateSidecart() {
    let sidecartContent = '';
    if (Object.keys(selectedProducts).length === 0) {
      sidecartContent = '<div class="sidecart-text">No items selected</div>';
    } else {
      sidecartContent = '<ul class="sidecart-list">';
      for (const [key, product] of Object.entries(selectedProducts)) {
        sidecartContent += `
          <li class="sidecart-item" data-product-key="${key}">
            <div class="sidecart-item-info">
              <div class="sidecart-item-title">${product.title}</div>
              <div class="sidecart-item-variant">${product.variantTitle}</div>
            </div>
            <div class="sidecart-item-quantity">
              <button type="button" class="quantity-button decrease" data-product-key="${key}">-</button>
              <input type="number" class="quantity-input" value="${product.quantity}" min="1" data-product-key="${key}">
              <button type="button" class="quantity-button increase" data-product-key="${key}">+</button>
            </div>
            <button type="button" class="sidecart-item-remove" data-product-key="${key}">Ã—</button>
          </li>
        `;
      }
      sidecartContent += '</ul>';
    }
    sidecartItems.innerHTML = sidecartContent;

    // Update form inputs
    sidecartForm.innerHTML = ''; // Clear existing inputs
    for (const product of Object.values(selectedProducts)) {
      const input = document.createElement('input');
      input.type = 'hidden';
      input.name = 'items[][id]';
      input.value = product.variantId;
      sidecartForm.appendChild(input);

      const quantityInput = document.createElement('input');
      quantityInput.type = 'hidden';
      quantityInput.name = 'items[][quantity]';
      quantityInput.value = product.quantity;
      sidecartForm.appendChild(quantityInput);
    }

    // Re-append the submit button
    const submitButton = document.createElement('button');
    submitButton.type = 'submit';
    submitButton.className = 'button button--primary';
    submitButton.id = 'add-to-cart-button';
    submitButton.textContent = 'Add to Cart';
    sidecartForm.appendChild(submitButton);

    // Add event listeners for quantity buttons and remove buttons
    document.querySelectorAll('.quantity-button').forEach(button => {
      button.addEventListener('click', updateQuantity);
    });
    document.querySelectorAll('.quantity-input').forEach(input => {
      input.addEventListener('change', updateQuantityFromInput);
    });
    document.querySelectorAll('.sidecart-item-remove').forEach(button => {
      button.addEventListener('click', removeFromSidecart);
    });
  }

  function addToSidecart(event) {
    const button = event.currentTarget;
    const productId = button.getAttribute('data-product-id');
    const variantId = button.getAttribute('data-variant-id');
    const variantTitle = button.getAttribute('data-variant-title');
    const productTitle = button.closest('.product-card').querySelector('.product-title').textContent;

    // Create a unique key for each product variant combination
    const key = `${productId}-${variantId}`;

    if (selectedProducts[key]) {
      selectedProducts[key].quantity += 1;
    } else {
      selectedProducts[key] = {
        id: productId,
        variantId: variantId,
        variantTitle: variantTitle,
        title: productTitle,
        quantity: 1
      };
    }

    updateSidecart();
  }

  function removeFromSidecart(event) {
    const key = event.currentTarget.getAttribute('data-product-key');
    delete selectedProducts[key];
    updateSidecart();
  }

  function updateQuantity(event) {
    const button = event.currentTarget;
    const key = button.getAttribute('data-product-key');
    const isIncrease = button.classList.contains('increase');
    
    if (selectedProducts[key]) {
      selectedProducts[key].quantity += isIncrease ? 1 : -1;
      if (selectedProducts[key].quantity < 1) {
        selectedProducts[key].quantity = 1;
      }
      updateSidecart();
    }
  }

  function updateQuantityFromInput(event) {
    const input = event.currentTarget;
    const key = input.getAttribute('data-product-key');
    const newQuantity = parseInt(input.value, 10);
    
    if (selectedProducts[key] && newQuantity > 0) {
      selectedProducts[key].quantity = newQuantity;
      updateSidecart();
    }
  }

  addToSidecartButtons.forEach(button => {
    button.addEventListener('click', addToSidecart);
  });

  // Initialize sidecart
  updateSidecart();
});
</script>


{% schema %}
{
  "name": "Collection Tabs",
  "class": "shopify-section--collection-tabs",
  "max_blocks": 5,
  "disabled_on": {
    "groups": ["header", "custom.overlay"]
  },
  "settings": [
    {
      "type": "checkbox",
      "id": "separate_section_with_border",
      "label": "t:global.section.separate_section_with_border",
      "default": true
    },
    {
      "type": "inline_richtext",
      "id": "subheading",
      "label": "t:global.text.subheading",
      "default": "Subheading"
    },
    {
      "type": "inline_richtext",
      "id": "title",
      "label": "t:global.text.heading",
      "default": "Collection Tabs"
    },
    {
      "type": "select",
      "id": "text_alignment",
      "label": "t:global.text.alignment",
      "options": [
        {
          "value": "start",
          "label": "t:global.position.left"
        },
        {
          "value": "center",
          "label": "t:global.position.center"
        }
      ],
      "default": "center"
    },
    {
      "type": "checkbox",
      "id": "hide_product_information",
      "label": "Hide product information",
      "default": false
    },
    {
      "type": "select",
      "id": "products_per_row_mobile",
      "label": "Products per row (mobile)",
      "options": [
        {
          "value": "1",
          "label": "1"
        },
        {
          "value": "2",
          "label": "2"
        }
      ],
      "default": "2"
    },
    {
      "type": "select",
      "id": "products_size_desktop",
      "label": "Product size (desktop)",
      "options": [
        {
          "value": "compact",
          "label": "Compact"
        },
        {
          "value": "medium",
          "label": "Medium"
        },
        {
          "value": "large",
          "label": "Large"
        }
      ],
      "default": "medium"
    },
    {
      "type": "range",
      "min": 0.2,
      "max": 2,
      "step": 0.1,
      "id": "horizontal_spacing_factor",
      "label": "Horizontal spacing factor",
      "default": 1
    },
    {
      "type": "range",
      "min": 0.2,
      "max": 2,
      "step": 0.1,
      "id": "vertical_spacing_factor",
      "label": "Vertical spacing factor",
      "default": 1
    }
  ],
  "blocks": [
    {
      "type": "collection_tab",
      "name": "Collection Tab",
      "settings": [
        {
          "type": "text",
          "id": "title",
          "label": "Tab title",
          "default": "Collection"
        },
        {
          "type": "collection",
          "id": "collection",
          "label": "Collection"
        },
        {
          "type": "range",
          "id": "products_count",
          "min": 4,
          "max": 48,
          "step": 4,
          "default": 16,
          "label": "Products to show per page"
        },
        {
          "type": "checkbox",
          "id": "open_on_mobile",
          "label": "Open on mobile",
          "default": false
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Collection Tabs",
      "blocks": [
        {
          "type": "collection_tab"
        },
        {
          "type": "collection_tab"
        },
        {
          "type": "collection_tab"
        }
      ]
    }
  ]
}
{% endschema %}